function button_press(num)
% Handles press events on any of the four main gameplay buttons. Also
% handles checking for correctness after an input sequence is complete.

% Load in data structure
handles = guidata(gcbo);

% Check if we're currently in a game, if we are, record user's input
if strcmp(handles.inSeq , 'True')
    handles.userInput(end+1) = num;
    if length(handles.userInput) == length(handles.num_sequence)
        % Update game data
        guidata(gcbo, handles);

        % See if user's sequence is correct
        is_done;
        
        % Load in new game data generated by the done callback
        handles = guidata(gcbo);
    end           
end

%Save off data structure
guidata(gcbo,handles); 

% resetLights(); 

% Play the short duration tone and light up the associated axes
switch num
    case 1
        player = audioplayer(handles.tone1, handles.fs);
        play(player);
%         axes(handles.axes_1);                   
%         fill([0 1 1 0],[0 0 1 1],handles.axes_1_color); 
%         axis off
        
        set(handles.pushbutton_1, 'BackgroundColor', handles.axes_1_color);
    
    case 2
        player = audioplayer(handles.tone2, handles.fs);
        play(player);
%         axes(handles.axes_2);                   
%         fill([0 1 1 0],[0 0 1 1],handles.axes_2_color); 
%         axis off
        
        set(handles.pushbutton_2, 'BackgroundColor', handles.axes_2_color);
        
    case 3
        player = audioplayer(handles.tone3, handles.fs);
        play(player);
%         axes(handles.axes_3);                   
%         fill([0 1 1 0],[0 0 1 1],handles.axes_3_color); 
%         axis off
        
        set(handles.pushbutton_3, 'BackgroundColor', handles.axes_3_color);
        
    case 4
        player = audioplayer(handles.tone4, handles.fs);
        play(player); 
%         axes(handles.axes_4);                   
%         fill([0 1 1 0],[0 0 1 1],handles.axes_4_color); 
%         axis off
        
        set(handles.pushbutton_4, 'BackgroundColor', handles.axes_4_color);
end

pause(handles.dur_short);
resetLights();


function is_done
   
    % Load in data structure
    handles = guidata(gcbo);
    
    % Stop the timer
    handles.timer = toc;
     
    % We're no longer in a game sequence
    handles.inSeq = 'False';
    
    % Make everything gray again
    resetLights();
    
    % If user enters a sequence of same length as the desired sequence
    % answer
    if length(handles.num_sequence) == length(handles.userInput)
        % If the difference between the two are the same, the user got it
        % right
        if sum(abs(handles.num_sequence - handles.userInput)) == 0
            
            % Main GUI result string
            set(handles.text_result, 'String', 'Correct!');
            set(handles.text_result, 'Visible', 'on');
            
            % Print performance information in the command window
            handles.userdata(end+1,1) = length(handles.num_sequence);
            handles.userdata(end,2) = handles.timer;
            fprintf('Correct: It took %1.3f to enter a sequence of length %i \n',...
                handles.timer,length(handles.num_sequence))
            
            % Print performance information in the actual GUI
            str = sprintf('%i', length(handles.num_sequence));
            set(handles.text_PrevRoundNum_val,'String',str);
            
            str = sprintf('%1.2f', handles.timer);
            set(handles.text_PrevRoundTime_val,'String',str);
            
            str = sprintf('%1.2f', handles.timer / length(handles.num_sequence));
            set(handles.text_PrevRoundAvg_val,'String',str);
            
            % Save off data
            guidata(gcbo,handles)
            
            % Make a new sequence of current length + 1
            makeSeq(length(handles.color_seq)+1);
            
            % Save off data again
            handles = guidata(gcbo);
                
        else
            
            % Main GUI result string
            set(handles.text_result, 'String', 'Incorrect');
            set(handles.text_result, 'Visible', 'on');
            
            % The user did not get it right, print out the information and
            % restart
            fprintf('You did not get it right. Performance Summary. \n')
            if size(handles.userdata,1) > 1
                fprintf('Successfully completed sequence %i \n', ... 
                    handles.userdata(end,1))
                fprintf('Average time per click: %1.3f \n', ...
                    mean(handles.userdata(:,2) ./ handles.userdata(:,1)))
                fprintf('Restarting \n \n')
            end
            
            % Save off data
            guidata(gcbo,handles)
            
            % Make new sequence 
            makeSeq(4);
            
            % Save off data again
            handles = guidata(gcbo);
            
            refresh
        end           
    end
        
   % Save the datastructure 
   guidata(gcbo,handles);

   % Make the start button visible after the program finishes
   set(handles.pushbutton_start, 'visible','on'); 
     
   
       
function resetLights()
% This function is used to set all of the lights back to gray

handles = guidata(gcbo);

% axes(handles.axes_1);
% fill([0 1 1 0],[0 0 1 1],handles.background_color);
% axis off
set(handles.pushbutton_1, 'BackgroundColor', handles.background_color_1);

% axes(handles.axes_2);
% fill([0 1 1 0],[0 0 1 1],handles.background_color);
% axis off
set(handles.pushbutton_2, 'BackgroundColor', handles.background_color_2);

% axes(handles.axes_3);
% fill([0 1 1 0],[0 0 1 1],handles.background_color);
% axis off
set(handles.pushbutton_3, 'BackgroundColor', handles.background_color_3);

% axes(handles.axes_4);
% fill([0 1 1 0],[0 0 1 1],handles.background_color);
% axis off
set(handles.pushbutton_4, 'BackgroundColor', handles.background_color_4);



